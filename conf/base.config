process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time   = { check_max( 1.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.attempt <= 3 ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

//first three steps
    withLabel:split_reads {
        //executor = 'lsf'
        cpus   = 20
        // Multiply the base memory by the task attempt number
        memory = { 1.GB * task.attempt }
        //queue = { task.attempt > 1 ? 'long' : 'normal' }
        time = { task.attempt > 1 ? 24.hour : 12.hour }
        maxRetries    = 10
        errorStrategy = 'retry'
    }
    withLabel:refine_reads {
        //executor = 'lsf'
        cpus   = 18
        // Multiply the base memory by the task attempt number
        memory = { 500.MB * task.attempt }
        //queue = { task.attempt > 1 ? 'long' : 'normal' }
        time = { task.attempt > 1 ? 24.hour : 12.hour }
        maxRetries = 3
        errorStrategy = 'retry'
    }
    withLabel:tag_bam {
        //executor = 'lsf'
        cpus   = 5
        // Multiply the base memory by the task attempt number
        memory = { 250.MB * task.attempt }
        //queue = { task.attempt > 1 ? 'long' : 'normal' }
        time = { task.attempt > 1 ? 24.hour : 12.hour }
        maxRetries = 3
        errorStrategy = 'retry'
    }
    withLabel:remove_primer {
        //executor = 'lsf'
        cpus   = 15
        // Multiply the base memory by the task attempt number
        memory = { 1.5.GB * task.attempt }
        //queue = { task.attempt > 1 ? 'long' : 'normal' }
        time = { task.attempt > 1 ? 24.hour : 12.hour }
        maxRetries = 3
        errorStrategy = 'retry'
    }
    withLabel:barcodes {
        //executor = 'lsf'
        cpus   = 10
        // Multiply the base memory by the task attempt number
        memory = { 70.GB * task.attempt }
        //queue = 'long'
        time = 24.hour
        maxRetries    = 0
        errorStrategy = 'retry'
    }
    withLabel:deduplication {
        //executor = 'lsf'
        cpus   = 8
        // Multiply the base memory by the task attempt number
	    memory = { task.exitStatus == 2 ? 20.GB : 20.GB * task.attempt }
        //queue = 'week'
        time = 7.day
        maxRetries    = 2
        errorStrategy = 'retry'
    }
    withLabel:map_reads {
        //executor = 'lsf'
        cpus   = 10
        // Multiply the base memory by the task attempt number
        memory = { 20.GB * task.attempt }
        //queue = { 'basement' }
        time = 10.day
        maxRetries    = 1
        errorStrategy = 'retry'
    }
//fourth step
    withLabel:big_job {
        //executor = 'lsf'
        cpus   = 1
        // Multiply the base memory by the task attempt number
        memory = { 10.GB * task.attempt }
        //queue = {'long'}
        time = 24.hour
        maxRetries    = 10
        errorStrategy = 'retry'
    }
    withLabel:big_job_collect {
        //executor = 'lsf'
        cpus   = 1
        // Multiply the base memory by the task attempt number
        memory = { 500.MB * task.attempt }
        //queue = {'long'}
        time = 24.hour
        maxRetries    = 10
        errorStrategy = 'retry'
    }
    withLabel:collect_gtfs {
        //executor = 'lsf'
        cpus   = 1
        // Multiply the base memory by the task attempt number
        memory = { 25.GB * task.attempt }
        //queue = {'long'}
        time = 24.hour
        maxRetries    = 10
        errorStrategy = 'retry'
    }
    withLabel:isoquant_chunked {
        //executor = 'lsf'
        cpus   = 2
        // Memory is defined dynamically in the process
        //queue = 'basement'
        time = 24.hour
        maxRetries    = 1
        errorStrategy = 'retry'
    }

    withLabel:micro_multithread_job {
        //executor = 'lsf'
        cpus   = 3
        // Multiply the base memory by the task attempt number
        memory = { 250.MB * task.attempt }
        maxRetries    = 0
        errorStrategy = 'finish'
    }
    withLabel:micro_job {
        //executor = 'lsf'
        cpus   = 1
        // Multiply the base memory by the task attempt number
        memory = { 250.MB * task.attempt }
        maxRetries    = 0
        errorStrategy = 'finish'
    }

    withLabel:medium_job {
        //executor = 'lsf'
        cpus   = 1
        // Multiply the base memory by the task attempt number
        memory = { 200.MB * task.attempt }
        maxRetries    = 0
        errorStrategy = 'finish'
    }

    withLabel:mini_job {
        //executor = 'lsf'
        cpus   = 1
        // Multiply the base memory by the task attempt number
        memory = { 200.MB * task.attempt }
        maxRetries    = 0
        errorStrategy = 'finish'
    }
    withLabel:mini_job_local {
        executor = 'local'
        cpus   = 1
        // Multiply the base memory by the task attempt number
        memory = { 100.MB * task.attempt }
        maxRetries    = 0
        errorStrategy = 'finish'
    }

//other steps
    withLabel:process_low {
        //executor = 'lsf'
        cpus   = { 1 }
        // Multiply the base memory by the task attempt number
        memory = { 20.GB * task.attempt }
        //queue = { task.attempt > 1 ? 'long' : 'normal' }
        time = { task.attempt > 1 ? 24.hour : 12.hour }
        maxRetries    = 10
        errorStrategy = 'retry'
    }

    withLabel:sort_bc {
        //executor = 'lsf'
        cpus   = 5
        // Multiply the base memory by the task attempt number
        memory = { 150.GB }
        //queue = { 'normal' }
        time = 12.hour
        maxRetries    = 0
        errorStrategy = 'retry'
    }
    withLabel:bcstats {
        //executor = 'lsf'
        cpus   = 5
        // Multiply the base memory by the task attempt number
        memory = { 70.GB * task.attempt }
        //queue = { task.attempt > 1 ? 'long' : 'normal' }
        time = { task.attempt > 1 ? 24.hour : 12.hour }
        maxRetries    = 1
        errorStrategy = 'retry'
    }

    withLabel:isoquant {
    	//executor = 'lsf'
    	cpus = 5
        //queue = 'basement'
        time = 24.hour
    	maxRetries = 1

    	// Dynamically adjust memory allocation based on task attempt (as basement has max memory ~600GB)
    	memory = { task.attempt == 1 ? 400.GB : 400.GB * (0.75 * task.attempt) }

    	// Set error strategy based on error type
    	errorStrategy = { task.exitStatus == 130 ? 'retry' : 'ignore' }

    	// - Exit status 130 indicates a memory-related/time-related error
    	// - Other errors will be ignored to prevent pipeline interruption
    }
    withLabel:isoquant {
        //executor = 'lsf'
        cpus   = 5
        // Multiply the base memory by the task attempt number
        memory = { 400.GB * task.attempt }
        //queue = 'basement'
        time = 24.hour
        maxRetries    = 1
	// basement queue suffers connectivity issues more often than other queues which may cause some problems
        errorStrategy = 'ignore'
    }
    withLabel:isoquant_split_by_chr {
        //executor = 'lsf'
        cpus   = 1
        // Multiply the base memory by the task attempt number
        memory = { 8.GB * task.attempt }
        //queue = 'normal'
        time = 12.hour
        maxRetries    = 1
        errorStrategy = 'retry'
    }

    withLabel:cluster_bams {
        //executor = 'lsf'
        cpus   = 20
        // Multiply the base memory by the task attempt number
        memory = { 300.GB * task.attempt }
        //queue = { 'basement' }
        time = 24.hour
        maxRetries    = 1
        errorStrategy = 'retry'
    }
    withLabel:small_job {
        //executor = 'lsf'
        cpus   = 1
        // Multiply the base memory by the task attempt number
        memory = { 8.GB * task.attempt }
        maxRetries    = 0
        errorStrategy = 'retry'
    }

    withLabel:isoquant_chunked_local {
        executor = 'local'
        cpus   = 1
        // Memory is defined dynamically in the process

        maxRetries    = 0
        errorStrategy = 'finish'
    }

    withLabel:massive_job {
        //executor = 'lsf'
        cpus   = 1
        // Multiply the base memory by the task attempt number
        memory = { 64.GB * task.attempt }
        maxRetries    = 0
        errorStrategy = 'finish'
    }
    withLabel:classify_isoforms {
        //executor = 'lsf'
        cpus   = 10
        // Multiply the base memory by the task attempt number
        memory = { 150.GB * task.attempt }
        //queue = { 'normal' }
        time = 12.hour
        maxRetries    = 0
        errorStrategy = 'retry'
    }
    withLabel:sqanti3 {
        //executor = 'lsf'
        cpus   = 10
        // Multiply the base memory by the task attempt number
        memory = { 150.GB * task.attempt }
        //queue = { 'normal' }
        time = 12.hour
        maxRetries    = 1
        errorStrategy = 'retry'
    }
    withLabel:seurat_isoforms {
        //executor = 'lsf'
        cpus   = 5
        // Multiply the base memory by the task attempt number
        memory = { 60.GB * task.attempt }
        //queue = { 'normal' }
        time = 12.hour
        maxRetries    = 0
        errorStrategy = 'retry'
    }
}