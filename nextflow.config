includeConfig 'conf/base.config'

params {
//new_test_value
number_of_chunks=10
//Input samples. Comma-separated file with path and sample_id. No header
nf_basedir = "/lustre/scratch126/humgen/teams/hgi/users/vo3/isoseq_test/wtsi-pbsc/"
//input_samples_path = "/lustre/scratch126/humgen/teams/hgi/users/vo3/isoseq_test/input_samples_freeze02.csv"
//input_samples_path = "/lustre/scratch126/humgen/teams/hgi/users/vo3/isoseq_test/input_samples_freeze02.test.csv"
input_samples_path = "/lustre/scratch127/humgen/teams_v2/hgi/vo3/isoseq_test/input_test.csv"
//input_samples_path = "/lustre/scratch126/humgen/teams/hgi/users/vo3/isoseq_test/input_samples_freeze02.original.csv"
exclude_samples = "/lustre/scratch126/humgen/teams/hgi/users/vo3/isoseq_test/excluded_samples.csv"
//Skera primers used by Skera to deconcatenate Kinnex reads
skera_primers = "/lustre/scratch127/humgen/teams_v2/hgi/vo3/isoseq_test/mas16_primers.fasta"
//10X primers
//tenx_primers = "/lustre/scratch126/humgen/projects/isogut/qc/3_prime_kit_primers.fasta"
tenx_primers = "/lustre/scratch127/humgen/teams_v2/hgi/vo3/isoseq_test/10x_3kit_primers.fasta"
//Directory to output results
//results_output = "/lustre/scratch126/humgen/teams/hgi/users/vo3/isoseq_test/isoseq_results/"
results_output = "/lustre/scratch127/humgen/teams_v2/hgi/vo3/isoseq_test/test_output/"
//Minimum polyA length to refine reads
min_polya_length = 20
dedup_batch_size = 5000000
//10X cell barcode whitelist
//threeprime_whitelist = "/lustre/scratch126/humgen/teams/hgi/users/vo3/isoseq_test/10x_whitelist_3_prime"
threeprime_whitelist = "/lustre/scratch125/humgen/resources_v2/PacBio_reference/cell_barcodes_whitelist/3M-february-2018.txt"
//Genome FASTA files
genome_fasta_f = "/lustre/scratch126/humgen/projects/isogut/qc/human_GRCh38_no_alt_analysis_set.fasta"
//CAGE peaks (used by pigeon)
cage_peak_f = "/lustre/scratch126/humgen/projects/isogut/qc/refTSS_v3.3_human_coordinate.hg38.sorted.bed"
//PolyA motifs (used by pigeon)
polya_f = "/lustre/scratch126/humgen/projects/isogut/qc/polyA.list.txt"
//Barcode correction strategy (used by isoseq correct; percentile or knee)
barcode_correction_method = "percentile"
barcode_correction_percentile = "99"
dedup_real_cells_only = "TRUE"
//GTF file (used by pigeon and isoquant)
gtf_f = "/lustre/scratch126/humgen/projects/isogut/utils/gencode.v46.annotation.sorted.gtf"
//SQANTI3 software path
sqanti3_path = "/nfs/team152/oe2/isogut/software/SQANTI3-5.2.1/"
//PolyA sites in the human genome (used by SQANTI3)
polya_sites = "/lustre/scratch126/humgen/projects/isogut/utils/atlas.clusters.2.0.GRCh38.96.bed"
//TODO: Should be removed
utils_scripts_path = "/nfs/team152/oe2/isogut/scripts/utils/"
knee_plot_script = "/nfs/team152/oe2/isogut/scripts/utils/plot_knees.py"
//Isoquant
chunks = 16
isoquant_exclusion_regions_bed = "/nfs/team152/oe2/isogut/scripts/workflows/isoseq/data/vdj_genes.bed"

    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    
}

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "https://raw.githubusercontent.com/nf-core/configs/master/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: https://raw.githubusercontent.com/nf-core/configs/master/nfcore_custom.config")
}


def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
